#
# ~/.bashrc
#


export HISTTIMEFORMAT="%d/%m/%y %T "

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# don't send annoying DBus error messages
export NO_AT_BRIDGE=1

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
[[ $DISPLAY ]] && shopt -s checkwinsize

#PS1='[\u@\h \W]\$ '

setxkbmap it


# Colours
  reset="\[\e[0m\]"	# Reset Default Colour
 tblack="\[\e[1;30m\]"	# Thin Black
   tred="\[\e[0;31m\]"	# Thin Red
 tgreen="\[\e[0;32m\]"	# Thin Green
tyellow="\[\e[0;33m\]"	# Thin Yellow
  tblue="\[\e[0;34m\]"	# Thin Blue
tpurple="\[\e[0;35m\]"	# Thin Purple
  tcyan="\[\e[0;36m\]"	# Thin Cyan
 twhite="\[\e[0;37m\]"	# Thin White
 bblack="\[\e[1;30m\]"	# Bold Black
   bred="\[\e[1;31m\]"	# Bold Red
 bgreen="\[\e[1;32m\]"	# Bold Green
byellow="\[\e[1;33m\]"	# Bold Yellow
  bblue="\[\e[1;34m\]"	# Bold Blue
bpurple="\[\e[1;35m\]"	# Bold Purple
  bcyan="\[\e[1;36m\]"	# Bold Cyan
 bwhite="\[\e[1;37m\]"	# Bold White

exitstatus() {
	if [[ $? == 0 ]]; then
		echo "$tgreen:)$reset"
	else
		echo "$tred:($reset"
	fi
}

getUser() {
	if [[ $UID == 0 ]]; then
		echo "$bred\u$reset"
	else
		echo "$bgreen\u$reset"
	fi
}

getHost() {
	echo "$bblue\h$reset"
}

getWorkdir() {
	echo "$byellow\w$reset"
}

PS1="\n$(getUser)@$(getHost):$(getWorkdir)\n\\$ "

case ${TERM} in
  xterm*|rxvt*|Eterm|aterm|kterm|gnome*)
    PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/\~}"'

    ;;
  screen*)
    PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033_%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/\~}"'
    ;;
esac

[ -r /usr/share/bash-completion/bash_completion   ] && . /usr/share/bash-completion/bash_completion

if [[ $TERM == xterm ]]; then export TERM="xterm-256color"; fi

# Path to flutter bin
export PATH="$PATH:/opt/flutter/bin"
export PATH=$PATH:~/bin

###-begin-pm2-completion-###
### credits to npm for the completion file model
#
# Installation: pm2 completion >> ~/.bashrc  (or ~/.zshrc)
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _pm2_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           pm2 completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _pm2_completion pm2
elif type compctl &>/dev/null; then
  _pm2_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       pm2 completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _pm2_completion + -f + pm2
fi
###-end-pm2-completion-###

# Path to go libs
export GOPATH="$HOME/go:$HOME/Learning/go:$HOME/exercism/go"
export PATH="$PATH:$GOPATH:$HOME/go/bin"

. "$HOME/.cargo/env"

alias ls="ls --color=tty"
alias ll="ls -la"
source /usr/share/nvm/init-nvm.sh
